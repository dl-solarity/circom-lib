import { expect } from "chai";
import { ethers, zkit } from "hardhat";

import { Reverter } from "../helpers/reverter";
import { bigIntToArray } from "../helpers/helperFunctions";

import {
  RsaVerifyPkcs1v15_64_32_65537_160_Groth16Verifier,
  RsaVerifyPkcs1v15_64_64_65537_256_Groth16Verifier,
  VerifyRsaPssSigNonOptimisedGroth16Verifier,
} from "@/generated-types/ethers";

import { VerifyRsaPssSigNonOptimised } from "@/generated-types/zkit";
import { RsaVerifyPkcs1v15 as rsa } from "@/generated-types/zkit/core/main/signatures/RsaVerifyPkcs1v15";
import { RsaVerifyPkcs1v15 as rsaSha1 } from "@/generated-types/zkit/core/main/signatures/rsaSha1.circom";

function stringArrToBigint(input: string[]): bigint[] {
  let intArr = [];

  for (let i = 0; i < input.length; i++) {
    intArr[i] = BigInt(input[i]);
  }

  return intArr;
}

async function testRsa(input1: bigint, input2: bigint, input3: string[], real_result: boolean, circuit: rsa) {
  const input: bigint[][] = [bigIntToArray(64, 64, input1), bigIntToArray(64, 64, input2), stringArrToBigint(input3)];
  let proofStruct;

  try {
    await circuit.calculateWitness({ signature: input[1], pubkey: input[0], hashed: input[2], dummy: 0n });

    proofStruct = await circuit.generateProof({
      signature: input[1],
      pubkey: input[0],
      hashed: input[2],
      dummy: 0n,
    });

    if (!real_result) {
      throw new Error(`Expected failure for rsa verification, but it passed.`);
    }
  } catch (err) {
    if (real_result) {
      throw new Error(`Unexpected failure for verification that is supposed to be correct.`);
    } else {
      console.log(`Predicted failure for rsa incorrect verification correctly handled.`);
    }
  }

  return proofStruct;
}

async function testRsaSha1(input1: bigint, input2: bigint, input3: string[], real_result: boolean, circuit: rsaSha1) {
  const input = [bigIntToArray(64, 32, input1), bigIntToArray(64, 32, input2), stringArrToBigint(input3)];
  let proofStruct;

  try {
    await circuit.calculateWitness({ pubkey: input[0], signature: input[1], hashed: input[2], dummy: 0n });

    proofStruct = await circuit.generateProof({
      signature: input[1],
      pubkey: input[0],
      hashed: input[2],
      dummy: 0n,
    });

    if (!real_result) {
      throw new Error(`Expected failure for rsaSha1 verification, but it passed.`);
    }
  } catch (err) {
    if (real_result) {
      throw new Error(`Unexpected failure for verification that is supposed to be correct.`);
    } else {
      console.log(`Predicted failure for rsaSha1 incorrect verification correctly handled.`);
    }
  }

  return proofStruct;
}

async function testRsaPss(
  input1: bigint,
  input2: bigint,
  input3: string[],
  real_result: boolean,
  circuit: VerifyRsaPssSigNonOptimised,
) {
  const input = [bigIntToArray(64, 48, input1), bigIntToArray(64, 48, input2), stringArrToBigint(input3)];
  let proofStruct;

  try {
    await circuit.calculateWitness({ pubkey: input[0], signature: input[1], hashed: input[2], dummy: 0n });

    proofStruct = await circuit.generateProof({ pubkey: input[0], signature: input[1], hashed: input[2], dummy: 0n });

    if (!real_result) {
      throw new Error(`Expected failure for pss verification, but it passed.`);
    }
  } catch (err) {
    if (real_result) {
      throw new Error(`Unexpected failure for verification that is supposed to be correct.`);
    } else {
      console.log(`Predicted failure for pss incorrect verification correctly handled.`);
    }
  }

  return proofStruct;
}

describe("Rsa test (Rsa4096)", function () {
  this.timeout(10000000);
  const reverter = new Reverter();

  let verifier: RsaVerifyPkcs1v15_64_64_65537_256_Groth16Verifier;
  let circuit: rsa;

  before("setup", async () => {
    const MockVerifier = await ethers.getContractFactory("RsaVerifyPkcs1v15_64_64_65537_256_Groth16Verifier");

    verifier = await MockVerifier.deploy();
    circuit = await zkit.getCircuit("circuits/main/signatures/rsa.circom:RsaVerifyPkcs1v15");

    await reverter.snapshot();
  });

  afterEach(reverter.revert);

  it("Ver correct rsa signature", async () => {
    const proof = await testRsa(
      966794594591497630990088481255129604880529505246618696062343747145455065393674705114598076667258359356005514572334478957188346177028010499636282385734473716380778450928201782150183997504972720498734128988945956072853392567420449178778315154469364228850156277877617730838633610363142293482197447790862554008120283083960210701742382718239764058868630154633529904220260168261729662614495369252589036291591059937269196420405635305282020890965765304286680856991581735526193439041031344664645993385638717069036768408215375049411467164122402608028363079733269180580880098061342301259842529311440896014390650876505481647852705064424018926676904870942307384562470317147378366777183112610822895615467212219358220611950062255437816492328521659768572936524474691990713603393130831862719025646189071742939942750644664353239091806387745377740848513382672240661555946733821625169396600253297126949785378582501346758979733263371087563160747896890383177417914329825944507512769402557973024901097255753830686229175483653832706609821896780204716188892090640849213558019825354210821487942835376504255524141897310347165197580901560489185033767396691353463343373458656862087494259031260151917669425342578539820653256047795544215937781876532375534962728937n,
      34118299562523804488551656142956942464585783285083000844654139273861656006043545689066745181442377327066538632100756389464106880981972177047329716135909755029349939508661955945210939082632478014354942412312577466888066663475002406216989529805371967864368058870135617832697476637593381663381684795853714927291118876314130746786016823218440982225886642540213199724600798614435851255427499585409232534392202189960415086724246504279514224093737383004462122867679121668499466841765028196175579847796626172891377947174459839608721667487663546353768149548280855824926695772961107210126873019648207366251553577620882537777677793349515596127066098941913120967970463912953064394436642437854387371503809157816370528804280739464667362765619447902493612978962735585035372143610144686308227651731453581699079083030547894526659444129516131308830810304620885827702156887170132173763931253564169803618983842970860730358617640646094154396050573524376546458979991791283887085118505982641599523218670245503856218311961365848090146240486484059162362244808969611853705058428025104822705416546694445663580550375338187438380242455208942810794721168486888504657843900954273451635138238712337837499130404276669326154227739089056711258700923106331039489336314n,
      [
        "0",
        "0",
        "0",
        "1",
        "0",
        "0",
        "0",
        "0",
        "1",
        "0",
        "0",
        "0",
        "1",
        "0",
        "0",
        "1",
        "0",
        "1",
        "0",
        "1",
        "0",
        "1",
        "0",
        "0",
        "1",
        "0",
        "1",
        "1",
        "0",
        "1",
        "0",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0",
        "0",
        "1",
        "0",
        "1",
        "1",
        "1",
        "0",
        "1",
        "1",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "1",
        "1",
        "1",
        "0",
        "1",
        "0",
        "0",
        "1",
        "0",
        "0",
        "1",
        "1",
        "0",
        "0",
        "0",
        "1",
        "1",
        "0",
        "0",
        "0",
        "0",
        "0",
        "1",
        "0",
        "0",
        "0",
        "1",
        "0",
        "0",
        "1",
        "0",
        "1",
        "0",
        "0",
        "0",
        "0",
        "1",
        "0",
        "1",
        "0",
        "1",
        "0",
        "1",
        "0",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0",
        "0",
        "1",
        "1",
        "0",
        "0",
        "1",
        "0",
        "1",
        "0",
        "0",
        "0",
        "0",
        "1",
        "1",
        "0",
        "0",
        "0",
        "1",
        "1",
        "1",
        "0",
        "1",
        "0",
        "1",
        "0",
        "1",
        "1",
        "1",
        "1",
        "0",
        "0",
        "0",
        "1",
        "0",
        "0",
        "1",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "1",
        "0",
        "0",
        "0",
        "1",
        "1",
        "0",
        "1",
        "0",
        "0",
        "1",
        "0",
        "1",
        "1",
        "1",
        "1",
        "0",
        "1",
        "0",
        "1",
        "1",
        "1",
        "0",
        "0",
        "1",
        "0",
        "0",
        "1",
        "0",
        "1",
        "0",
        "0",
        "1",
        "1",
        "0",
        "1",
        "0",
        "1",
        "1",
        "1",
        "0",
        "0",
        "1",
        "1",
        "0",
        "0",
        "1",
        "1",
        "1",
        "1",
        "0",
        "1",
        "0",
        "0",
        "1",
        "1",
        "0",
        "1",
        "0",
        "0",
        "0",
        "1",
        "0",
        "1",
        "1",
        "0",
        "1",
        "1",
        "0",
        "0",
        "0",
        "0",
        "1",
        "0",
        "0",
        "1",
        "1",
        "1",
        "0",
        "1",
        "0",
        "0",
        "1",
        "0",
        "1",
        "0",
        "1",
        "1",
        "0",
        "1",
        "0",
        "0",
        "1",
        "0",
        "0",
        "0",
        "0",
        "1",
        "0",
        "0",
        "0",
        "1",
        "1",
        "1",
        "1",
        "0",
        "1",
      ],
      true,
      circuit,
    );

    if (!proof) {
      throw new Error(`Unexpected failure for proof generation.`);
    }

    await expect(circuit).to.useSolidityVerifier(verifier).and.verifyProof(proof);
  });

  it("Ver incorrect rsa signature, should handle failture", async () => {
    await testRsa(
      966794594591497630990088481255129604880529505246618696062343747145455065393674705114598076667258359356005514572334478957188346177028010499636282385734473716380778450928201782150183997504972720498734128988945956072853392567420449178778315154469364228850156277877617730838633610363142293482197447790862554008120283083960210701742382718239764058868630154633529904220260168261729662614495369252589036291591059937269196420405635305282020890965765304286680856991581735526193439041031344664645993385638717069036768408215375049411467164122402608028363079733269180580880098061342301259842529311440896014390650876505481647852705064424018926676904870942307384562470317147378366777183112610822895615467212219358220611950062255437816492328521659768572936524474691990713603393130831862719025646189071742939942750644664353239091806387745377740848513382672240661555946733821625169396600253297126949785378582501346758979733263371087563160747896890383177417914329825944507512769402557973024901097255753830686229175483653832706609821896780204716188892090640849213558019825354210821487942835376504255524141897310347165197580901560489185033767396691353463343373458656862087494259031260151917669425342578539820653256047795544215937781876532375534962728936n,
      34118299562523804488551656142956942464585783285083000844654139273861656006043545689066745181442377327066538632100756389464106880981972177047329716135909755029349939508661955945210939082632478014354942412312577466888066663475002406216989529805371967864368058870135617832697476637593381663381684795853714927291118876314130746786016823218440982225886642540213199724600798614435851255427499585409232534392202189960415086724246504279514224093737383004462122867679121668499466841765028196175579847796626172891377947174459839608721667487663546353768149548280855824926695772961107210126873019648207366251553577620882537777677793349515596127066098941913120967970463912953064394436642437854387371503809157816370528804280739464667362765619447902493612978962735585035372143610144686308227651731453581699079083030547894526659444129516131308830810304620885827702156887170132173763931253564169803618983842970860730358617640646094154396050573524376546458979991791283887085118505982641599523218670245503856218311961365848090146240486484059162362244808969611853705058428025104822705416546694445663580550375338187438380242455208942810794721168486888504657843900954273451635138238712337837499130404276669326154227739089056711258700923106331039489336314n,
      [
        "0",
        "0",
        "0",
        "1",
        "0",
        "0",
        "0",
        "0",
        "1",
        "0",
        "0",
        "0",
        "1",
        "0",
        "0",
        "1",
        "0",
        "1",
        "0",
        "1",
        "0",
        "1",
        "0",
        "0",
        "1",
        "0",
        "1",
        "1",
        "0",
        "1",
        "0",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0",
        "0",
        "1",
        "0",
        "1",
        "1",
        "1",
        "0",
        "1",
        "1",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "1",
        "1",
        "1",
        "0",
        "1",
        "0",
        "0",
        "1",
        "0",
        "0",
        "1",
        "1",
        "0",
        "0",
        "0",
        "1",
        "1",
        "0",
        "0",
        "0",
        "0",
        "0",
        "1",
        "0",
        "0",
        "0",
        "1",
        "0",
        "0",
        "1",
        "0",
        "1",
        "0",
        "0",
        "0",
        "0",
        "1",
        "0",
        "1",
        "0",
        "1",
        "0",
        "1",
        "0",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0",
        "0",
        "1",
        "1",
        "0",
        "0",
        "1",
        "0",
        "1",
        "0",
        "0",
        "0",
        "0",
        "1",
        "1",
        "0",
        "0",
        "0",
        "1",
        "1",
        "1",
        "0",
        "1",
        "0",
        "1",
        "0",
        "1",
        "1",
        "1",
        "1",
        "0",
        "0",
        "0",
        "1",
        "0",
        "0",
        "1",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "1",
        "0",
        "0",
        "0",
        "1",
        "1",
        "0",
        "1",
        "0",
        "0",
        "1",
        "0",
        "1",
        "1",
        "1",
        "1",
        "0",
        "1",
        "0",
        "1",
        "1",
        "1",
        "0",
        "0",
        "1",
        "0",
        "0",
        "1",
        "0",
        "1",
        "0",
        "0",
        "1",
        "1",
        "0",
        "1",
        "0",
        "1",
        "1",
        "1",
        "0",
        "0",
        "1",
        "1",
        "0",
        "0",
        "1",
        "1",
        "1",
        "1",
        "0",
        "1",
        "0",
        "0",
        "1",
        "1",
        "0",
        "1",
        "0",
        "0",
        "0",
        "1",
        "0",
        "1",
        "1",
        "0",
        "1",
        "1",
        "0",
        "0",
        "0",
        "0",
        "1",
        "0",
        "0",
        "1",
        "1",
        "1",
        "0",
        "1",
        "0",
        "0",
        "1",
        "0",
        "1",
        "0",
        "1",
        "1",
        "0",
        "1",
        "0",
        "0",
        "1",
        "0",
        "0",
        "0",
        "0",
        "1",
        "0",
        "0",
        "0",
        "1",
        "1",
        "1",
        "1",
        "0",
        "1",
      ],
      false,
      circuit,
    );
  });
});

describe("RsaPss test (RsaPss3072, salt = 32)", function () {
  this.timeout(10000000);
  const reverter = new Reverter();

  let verifier: VerifyRsaPssSigNonOptimisedGroth16Verifier;
  let circuit: VerifyRsaPssSigNonOptimised;

  before("setup", async () => {
    const MockVerifier = await ethers.getContractFactory("VerifyRsaPssSigNonOptimisedGroth16Verifier");

    verifier = await MockVerifier.deploy();
    circuit = await zkit.getCircuit("VerifyRsaPssSigNonOptimised");

    await reverter.snapshot();
  });

  afterEach(reverter.revert);

  it("Ver correct rsaPss signature", async () => {
    const proof = await testRsaPss(
      4113609079361890290343124757178891027915314120254569190712127817022520409471113273525542113499219395133298138873188140060427318606784780707987560131331447386198669483233521789318826950113156496481427642568913454418222213395112560982955766045774635518584724346179524725561752094314752222389840557043677061208912521304049920465723887334739054597563593846972608027391678133879848594574267274595018846020256242021432002797986053122265472470324951403427394242345394005853383186290067693061878478954572592945769741470877344343748551352709310862591223395658348741237779206802196138827489540343946775111753298856044459680776978922295629897726502258229937372675335642151330597500140533591873809262049502706747512450102373427519953774301941635342032583464605176958678522906480127638105339869422598894919355664746564495292920838117533882344105494270798479566243713071066981053939369235762484695439529371987272378523976354404030167992329n,
      1860869103840881100044436808992116519734626156876775390721034020848655520939500787270193071629664658656270941452933295551802305308126071999547339252909629894647776473881635522300983873929823914317122190671100034858483614679155416151077706353579198334649108312976916091716336526428819491064872925070569730844878409595942712549116947361523180775453332020546872765207275511195373872338141540501649128434318077191959836102467954435194584392293057043008672005726850027502048752402586979822813655930741198676411225740450586760907941378324328363456128967910881928455796616761373864590826427688108950647194409411834539943525273491631050379424841398227120778160893253250497855944315541687130160296566773404811593622234490220560659449718403220027646989810732210947997788107655117559416782624533364244368241935684628922949021010864951158918396790825997205427511568521111900507405703957280413874017400614380567207305700757867494647534306n,
      [
        "1",
        "1",
        "0",
        "0",
        "0",
        "1",
        "0",
        "0",
        "0",
        "1",
        "0",
        "1",
        "0",
        "1",
        "1",
        "0",
        "1",
        "0",
        "1",
        "1",
        "0",
        "0",
        "0",
        "1",
        "1",
        "0",
        "1",
        "0",
        "1",
        "1",
        "0",
        "0",
        "1",
        "0",
        "0",
        "1",
        "0",
        "0",
        "1",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "1",
        "0",
        "0",
        "1",
        "0",
        "1",
        "1",
        "0",
        "1",
        "1",
        "0",
        "1",
        "1",
        "1",
        "1",
        "0",
        "0",
        "0",
        "1",
        "0",
        "0",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0",
        "0",
        "1",
        "0",
        "0",
        "0",
        "1",
        "0",
        "0",
        "1",
        "0",
        "0",
        "1",
        "0",
        "1",
        "0",
        "1",
        "0",
        "1",
        "0",
        "0",
        "0",
        "0",
        "0",
        "1",
        "0",
        "0",
        "1",
        "1",
        "1",
        "1",
        "0",
        "0",
        "1",
        "0",
        "0",
        "0",
        "0",
        "1",
        "0",
        "0",
        "1",
        "1",
        "1",
        "0",
        "1",
        "0",
        "1",
        "1",
        "1",
        "1",
        "0",
        "0",
        "0",
        "1",
        "0",
        "1",
        "0",
        "0",
        "1",
        "1",
        "0",
        "1",
        "1",
        "1",
        "0",
        "1",
        "1",
        "1",
        "0",
        "1",
        "1",
        "1",
        "0",
        "0",
        "0",
        "1",
        "0",
        "1",
        "1",
        "1",
        "1",
        "0",
        "0",
        "1",
        "0",
        "0",
        "0",
        "1",
        "1",
        "0",
        "1",
        "0",
        "1",
        "1",
        "1",
        "0",
        "1",
        "1",
        "1",
        "0",
        "1",
        "1",
        "1",
        "0",
        "1",
        "1",
        "1",
        "0",
        "0",
        "1",
        "0",
        "1",
        "1",
        "1",
        "0",
        "0",
        "1",
        "1",
        "1",
        "0",
        "0",
        "1",
        "1",
        "0",
        "1",
        "1",
        "0",
        "0",
        "0",
        "1",
        "0",
        "1",
        "1",
        "0",
        "1",
        "0",
        "1",
        "0",
        "1",
        "1",
        "0",
        "1",
        "0",
        "0",
        "0",
        "0",
        "1",
        "0",
        "1",
        "1",
        "0",
        "1",
        "1",
        "0",
        "1",
        "1",
        "0",
        "0",
        "1",
        "0",
        "0",
        "1",
        "1",
        "0",
        "0",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0",
        "0",
        "0",
        "1",
        "0",
        "1",
        "1",
        "1",
        "0",
        "0",
        "1",
        "1",
      ],
      true,
      circuit,
    );

    if (!proof) {
      throw new Error(`Unexpected failure for proof generation.`);
    }

    await expect(circuit).to.useSolidityVerifier(verifier).and.verifyProof(proof);
  });

  it("Ver incorrect rsaPss signature, should handle failture", async () => {
    await testRsaPss(
      4113609079361890290343124757178891027915314120254569190712127817022520409471113273525542113499219395133298138873188140060427318606784780707987560131331447386198669483233521789318826950113156496481427642568913454418222213395112560982955766045774635518584724346179524725561752094314752222389840557043677061208912521304049920465723887334739054597563593846972608027391678133879848594574267274595018846020256242021432002797986053122265472470324951403427394242345394005853383186290067693061878478954572592945769741470877344343748551352709310862591223395658348741237779206802196138827489540343946775111753298856044459680776978922295629897726502258229937372675335642151330597500140533591873809262049502706747512450102373427519953774301941635342032583464605176958678522906480127638105339869422598894919355664746564495292920838117533882344105494270798479566243713071066981053939369235762484695439529371987272378523976354404030167992329n,
      1860869103840881100044436808992116519734626156876775390721034020848655520939500787270193071629664658656270941452933295551802305308126071999547339252909629894647776473881635522300983873929823914317122190671100034858483614679155416151077706353579198334649108312976916091716336526428819491064872925070569730844878409595942712549116947361523180775453332020546872765207275511195373872338141540501649128434318077191859836102467954435194584392293057043008672005726850027502048752402586979822813655930741198676411225740450586760907941378324328363456128967910881928455796616761373864590826427688108950647194409411834539943525273491631050379424841398227120778160893253250497855944315541687130160296566773404811593622234490220560659449718403220027646989810732210947997788107655117559416782624533364244368241935684628922949021010864951158918396790825997205427511568521111900507405703957280413874017400614380567207305700757867494647534306n,
      [
        "1",
        "1",
        "0",
        "0",
        "0",
        "1",
        "0",
        "0",
        "0",
        "1",
        "0",
        "1",
        "0",
        "1",
        "1",
        "0",
        "1",
        "0",
        "1",
        "1",
        "0",
        "0",
        "0",
        "1",
        "1",
        "0",
        "1",
        "0",
        "1",
        "1",
        "0",
        "0",
        "1",
        "0",
        "0",
        "1",
        "0",
        "0",
        "1",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "1",
        "0",
        "0",
        "1",
        "0",
        "1",
        "1",
        "0",
        "1",
        "1",
        "0",
        "1",
        "1",
        "1",
        "1",
        "0",
        "0",
        "0",
        "1",
        "0",
        "0",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0",
        "0",
        "1",
        "0",
        "0",
        "0",
        "1",
        "0",
        "0",
        "1",
        "0",
        "0",
        "1",
        "0",
        "1",
        "0",
        "1",
        "0",
        "1",
        "0",
        "0",
        "0",
        "0",
        "0",
        "1",
        "0",
        "0",
        "1",
        "1",
        "1",
        "1",
        "0",
        "0",
        "1",
        "0",
        "0",
        "0",
        "0",
        "1",
        "0",
        "0",
        "1",
        "1",
        "1",
        "0",
        "1",
        "0",
        "1",
        "1",
        "1",
        "1",
        "0",
        "0",
        "0",
        "1",
        "0",
        "1",
        "0",
        "0",
        "1",
        "1",
        "0",
        "1",
        "1",
        "1",
        "0",
        "1",
        "1",
        "1",
        "0",
        "1",
        "1",
        "1",
        "0",
        "0",
        "0",
        "1",
        "0",
        "1",
        "1",
        "1",
        "1",
        "0",
        "0",
        "1",
        "0",
        "0",
        "0",
        "1",
        "1",
        "0",
        "1",
        "0",
        "1",
        "1",
        "1",
        "0",
        "1",
        "1",
        "1",
        "0",
        "1",
        "1",
        "1",
        "0",
        "1",
        "1",
        "1",
        "0",
        "0",
        "1",
        "0",
        "1",
        "1",
        "1",
        "0",
        "0",
        "1",
        "1",
        "1",
        "0",
        "0",
        "1",
        "1",
        "0",
        "1",
        "1",
        "0",
        "0",
        "0",
        "1",
        "0",
        "1",
        "1",
        "0",
        "1",
        "0",
        "1",
        "0",
        "1",
        "1",
        "0",
        "1",
        "0",
        "0",
        "0",
        "0",
        "1",
        "0",
        "1",
        "1",
        "0",
        "1",
        "1",
        "0",
        "1",
        "1",
        "0",
        "0",
        "1",
        "0",
        "0",
        "1",
        "1",
        "0",
        "0",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0",
        "0",
        "0",
        "1",
        "0",
        "1",
        "1",
        "1",
        "0",
        "0",
        "1",
        "1",
      ],
      false,
      circuit,
    );
  });
});

describe("Rsa test (Rsa2048Sha1)", function () {
  this.timeout(10000000);
  const reverter = new Reverter();

  let verifier: RsaVerifyPkcs1v15_64_32_65537_160_Groth16Verifier;
  let circuit: rsaSha1;

  before("setup", async () => {
    const MockVerifier = await ethers.getContractFactory("RsaVerifyPkcs1v15_64_32_65537_160_Groth16Verifier");

    verifier = await MockVerifier.deploy();
    circuit = await zkit.getCircuit("circuits/main/signatures/rsaSha1.circom:RsaVerifyPkcs1v15");

    await reverter.snapshot();
  });

  afterEach(reverter.revert);

  it("Ver correct rsaSha1 signature", async () => {
    const proof = await testRsaSha1(
      23690023017114049135801300050447085618692359784282773351895624932443613411384285262579387188086991207259044251421542421583292426268954382752437538243471307889732676634928596826214870462539948045265223502723035413933031379066942435461521967040255491505513450802960546905093588263797505183117442451961225538443468220476023363813852759949232567570537004949733102504545677594743455464483105146916296356134762125764430323426930703392965229444594982201577276065671804901458645924682525660988975184510897319925444606215105573379421440670965525089439734299537757170505747574372423860357385279185557831596354669456577485005807n,
      11898387219787362636327200785622573571259531735193795628280549746027131362539997757344811090834474733471121264244035120090428012750290602646027087691032826389911466879537840655252227272256377189473573487288897829773665205034724862413723762777919586809562596339986383371735188015940574149684154096012940401450665215635069899931403516700372943986573006224010522707733414052611515188306710465563381427084335519690699590461943220833579387047512722439736534601624160842595649033804092694753461552233923054210067420831476361554181192761991241367312703779919014859712343903349406197320545888960374852670609056491540414960710n,
      [
        "1",
        "0",
        "1",
        "0",
        "0",
        "0",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0",
        "1",
        "1",
        "0",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0",
        "1",
        "0",
        "1",
        "0",
        "1",
        "1",
        "0",
        "0",
        "1",
        "0",
        "0",
        "0",
        "0",
        "0",
        "1",
        "1",
        "0",
        "1",
        "0",
        "0",
        "1",
        "0",
        "0",
        "0",
        "1",
        "1",
        "0",
        "1",
        "0",
        "0",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0",
        "1",
        "0",
        "1",
        "1",
        "1",
        "0",
        "0",
        "1",
        "0",
        "1",
        "1",
        "1",
        "1",
        "0",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0",
        "0",
        "0",
        "0",
        "1",
        "1",
        "1",
        "0",
        "0",
        "0",
        "1",
        "0",
        "1",
        "1",
        "0",
        "1",
        "0",
        "0",
        "0",
        "1",
        "1",
        "0",
        "1",
        "1",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0",
        "1",
        "1",
        "0",
        "0",
        "1",
        "1",
        "1",
        "1",
        "0",
        "0",
        "1",
        "0",
        "0",
        "0",
        "1",
        "1",
        "1",
        "1",
        "0",
        "0",
        "1",
        "0",
        "0",
        "1",
        "1",
        "1",
        "1",
        "0",
        "0",
        "1",
        "0",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0",
        "0",
      ],
      true,
      circuit,
    );

    if (!proof) {
      throw new Error(`Unexpected failure for proof generation.`);
    }

    await expect(circuit).to.useSolidityVerifier(verifier).and.verifyProof(proof);
  });

  it("Ver incorrect rsaSha1 signature, should handle failture", async () => {
    await testRsaSha1(
      23690023017114049135801300050447085618692359784282773351895624932443613411384285262579387188086991207259044251421542421583292426268954382752437538243471307889732676634928596826214870462539948045265223502723035413933031379066942435461521967040255491505513450802960546905093588263797505183117442451961225538443468220476023363813852759949232567570537004949733102504545677594743455464483105146916296356134762125764430323426930703392965229444594982201577276065671804901458645924682525660988975184510897319925444606215105573379421440670965525089439734299537757170505747574372423860357385279185557831596354669456577485005807n,
      11898387219787362636327200785622573571259531735193795628280549746027131362539997757344811090834474733471121264244035120090428012750290602646027087691032826389911466879537840655252227272256377189473573487288897829773665205034724862413723762777919586809562596339986383371735188015940574149684154096012940401450665215635069899931403516700372943986573006224010522707733414052611515188306710465563381427084335519690699590461943220833579387047512722439736534601624160842595649033804092694753461552233923054210067420831476361554181192761991241367312703779919014859712343903349406197320545888960374852670609056491540414960711n,
      [
        "1",
        "0",
        "1",
        "0",
        "0",
        "0",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0",
        "1",
        "1",
        "0",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0",
        "1",
        "0",
        "1",
        "0",
        "1",
        "1",
        "0",
        "0",
        "1",
        "0",
        "0",
        "0",
        "0",
        "0",
        "1",
        "1",
        "0",
        "1",
        "0",
        "0",
        "1",
        "0",
        "0",
        "0",
        "1",
        "1",
        "0",
        "1",
        "0",
        "0",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0",
        "1",
        "0",
        "1",
        "1",
        "1",
        "0",
        "0",
        "1",
        "0",
        "1",
        "1",
        "1",
        "1",
        "0",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0",
        "0",
        "0",
        "0",
        "1",
        "1",
        "1",
        "0",
        "0",
        "0",
        "1",
        "0",
        "1",
        "1",
        "0",
        "1",
        "0",
        "0",
        "0",
        "1",
        "1",
        "0",
        "1",
        "1",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0",
        "1",
        "1",
        "0",
        "0",
        "1",
        "1",
        "1",
        "1",
        "0",
        "0",
        "1",
        "0",
        "0",
        "0",
        "1",
        "1",
        "1",
        "1",
        "0",
        "0",
        "1",
        "0",
        "0",
        "1",
        "1",
        "1",
        "1",
        "0",
        "0",
        "1",
        "0",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0",
        "0",
      ],
      false,
      circuit,
    );
  });
});
