/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace SparseMerkleTree {
  export type ProofStruct = {
    root: BytesLike;
    siblings: BytesLike[];
    existence: boolean;
    key: BytesLike;
    value: BytesLike;
    auxExistence: boolean;
    auxKey: BytesLike;
    auxValue: BytesLike;
  };

  export type ProofStructOutput = [
    root: string,
    siblings: string[],
    existence: boolean,
    key: string,
    value: string,
    auxExistence: boolean,
    auxKey: string,
    auxValue: string,
  ] & {
    root: string;
    siblings: string[];
    existence: boolean;
    key: string;
    value: string;
    auxExistence: boolean;
    auxKey: string;
    auxValue: string;
  };
}

export interface SmtMockInterface extends Interface {
  getFunction(nameOrSignature: "addElement" | "getProof" | "poseidon2" | "poseidon3"): FunctionFragment;

  encodeFunctionData(functionFragment: "addElement", values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: "getProof", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "poseidon2", values: [BytesLike, BytesLike]): string;
  encodeFunctionData(functionFragment: "poseidon3", values: [BytesLike, BytesLike, BytesLike]): string;

  decodeFunctionResult(functionFragment: "addElement", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getProof", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poseidon2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poseidon3", data: BytesLike): Result;
}

export interface SmtMock extends BaseContract {
  connect(runner?: ContractRunner | null): SmtMock;
  waitForDeployment(): Promise<this>;

  interface: SmtMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  addElement: TypedContractMethod<[index_: BigNumberish, elem_: BigNumberish], [void], "nonpayable">;

  getProof: TypedContractMethod<[index_: BigNumberish], [SparseMerkleTree.ProofStructOutput], "view">;

  poseidon2: TypedContractMethod<[el1_: BytesLike, el2_: BytesLike], [string], "view">;

  poseidon3: TypedContractMethod<[el1_: BytesLike, el2_: BytesLike, el3_: BytesLike], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(
    nameOrSignature: "addElement",
  ): TypedContractMethod<[index_: BigNumberish, elem_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getProof",
  ): TypedContractMethod<[index_: BigNumberish], [SparseMerkleTree.ProofStructOutput], "view">;
  getFunction(nameOrSignature: "poseidon2"): TypedContractMethod<[el1_: BytesLike, el2_: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "poseidon3",
  ): TypedContractMethod<[el1_: BytesLike, el2_: BytesLike, el3_: BytesLike], [string], "view">;

  filters: {};
}
