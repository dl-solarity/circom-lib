/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface PoseidonFacadeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "poseidon1"
      | "poseidon2"
      | "poseidon3"
      | "poseidon4"
      | "poseidon5"
      | "poseidon6"
      | "poseidonSponge",
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "poseidon1", values: [[BigNumberish]]): string;
  encodeFunctionData(functionFragment: "poseidon2", values: [[BigNumberish, BigNumberish]]): string;
  encodeFunctionData(functionFragment: "poseidon3", values: [[BigNumberish, BigNumberish, BigNumberish]]): string;
  encodeFunctionData(
    functionFragment: "poseidon4",
    values: [[BigNumberish, BigNumberish, BigNumberish, BigNumberish]],
  ): string;
  encodeFunctionData(
    functionFragment: "poseidon5",
    values: [[BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish]],
  ): string;
  encodeFunctionData(functionFragment: "poseidon6", values: [BigNumberish[]]): string;
  encodeFunctionData(functionFragment: "poseidonSponge", values: [BigNumberish[]]): string;

  decodeFunctionResult(functionFragment: "poseidon1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poseidon2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poseidon3", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poseidon4", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poseidon5", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poseidon6", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poseidonSponge", data: BytesLike): Result;
}

export interface PoseidonFacade extends BaseContract {
  connect(runner?: ContractRunner | null): PoseidonFacade;
  waitForDeployment(): Promise<this>;

  interface: PoseidonFacadeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  poseidon1: TypedContractMethod<[el: [BigNumberish]], [bigint], "view">;

  poseidon2: TypedContractMethod<[el: [BigNumberish, BigNumberish]], [bigint], "view">;

  poseidon3: TypedContractMethod<[el: [BigNumberish, BigNumberish, BigNumberish]], [bigint], "view">;

  poseidon4: TypedContractMethod<[el: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]], [bigint], "view">;

  poseidon5: TypedContractMethod<
    [el: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish]],
    [bigint],
    "view"
  >;

  poseidon6: TypedContractMethod<[el: BigNumberish[]], [bigint], "view">;

  poseidonSponge: TypedContractMethod<[el: BigNumberish[]], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(nameOrSignature: "poseidon1"): TypedContractMethod<[el: [BigNumberish]], [bigint], "view">;
  getFunction(nameOrSignature: "poseidon2"): TypedContractMethod<[el: [BigNumberish, BigNumberish]], [bigint], "view">;
  getFunction(
    nameOrSignature: "poseidon3",
  ): TypedContractMethod<[el: [BigNumberish, BigNumberish, BigNumberish]], [bigint], "view">;
  getFunction(
    nameOrSignature: "poseidon4",
  ): TypedContractMethod<[el: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]], [bigint], "view">;
  getFunction(
    nameOrSignature: "poseidon5",
  ): TypedContractMethod<
    [el: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish]],
    [bigint],
    "view"
  >;
  getFunction(nameOrSignature: "poseidon6"): TypedContractMethod<[el: BigNumberish[]], [bigint], "view">;
  getFunction(nameOrSignature: "poseidonSponge"): TypedContractMethod<[el: BigNumberish[]], [bigint], "view">;

  filters: {};
}
