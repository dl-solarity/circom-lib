const { assert } = require("console");
const path = require("path");

const Scalar = require("ffjavascript").Scalar;
const wasm_tester = require("circom_tester").wasm;

function bigintToArray(n, k, x) {
    let mod = BigInt(1);
    for (let idx = 0; idx < n; idx++) {
        mod *= BigInt(2);
    }

    const ret = [];
    let xTemp = x;
    for (let idx = 0; idx < k; idx++) {
        ret.push(xTemp % mod);
        xTemp /= mod; 
    }

    return ret;
}

async function testMod(input1, input2, circuit){
    let input = [bigintToArray(64, 8, input1), bigintToArray(64, 4, input2)];

    let real_result = bigintToArray(64, 4, input1 % input2);

    const w = await circuit.calculateWitness({base: input[0], modulus: input[1], dummy: 0n}, true);

    let circuit_result = w.slice(1+5, 1+5+4);

    for (var i = 0; i < 4; i++){
        assert(circuit_result[i] == real_result[i], `${input1} % ${input2}, equal`)
    }

}

async function testModNonEqual(input1, input2, circuit){
    let input = [bigintToArray(64, 6, input1), bigintToArray(64, 4, input2)];

    let real_result = bigintToArray(64, 4, input1 % input2);

    const w = await circuit.calculateWitness({base: input[0], modulus:input[1], dummy: 0n}, true);

    let circuit_result = w.slice(1+3, 1+3+4);



    for (var i = 0; i < 4; i++){
        assert(circuit_result[i] == real_result[i], `${input1} % ${input2}, non equal`)
    }

}

async function testMultiplyingMod(input1, input2, input3, circuit){
    let input = [bigintToArray(64, 4, input1), bigintToArray(64, 4, input2),  bigintToArray(64, 4, input3)];

    let real_result = bigintToArray(64, 4, input1 * input2 % input3 );

    const w = await circuit.calculateWitness({in: input, dummy: 0n}, true);

    let circuit_result = w.slice(1, 1+4);

    for (var i = 0; i < 4; i++){
        assert(circuit_result[i] == real_result[i], "pm")
    }

}

async function testNonEqualMultiplyingMod(input1, input2, input3, circuit){
    let input = [bigintToArray(64, 6, input1), bigintToArray(64, 4, input2), bigintToArray(64, 5, input3)];

    let real_result = bigintToArray(64, 5, input1 * input2 % input3);

    const w = await circuit.calculateWitness({in1: input[0], in2: input[1], modulus: input[2], dummy: 0n}, true);

    let circuit_result = w.slice(1, 1+5);
    

    for (var i = 0; i < 5; i++){
        assert(circuit_result[i] == real_result[i], `${input1} * ${input2} % ${input3}`)
    }
}


describe("Big mod test", function () {

    this.timeout(100000);
    let circuit;

    before(async () => {
        circuit = await wasm_tester(path.join(__dirname, "circuits", "bigInt", "bigMod.circom"));
    });

    it("15 % 26262817184209173020064851983289930415585458833826032068889457685516668396079", async function () {
        await testMod(15n, 26262817184209173020064851983289930415585458833826032068889457685516668396079n, circuit);
    });

    it("109730872847609188478309451572148122150330802072000585050763249942403213063436 % 109730872847609188478309451572148122150330802072000585050763249942403213063436", async function () {
        await testMod(109730872847609188478309451572148122150330802072000585050763249942403213063436n, 109730872847609188478309451572148122150330802072000585050763249942403213063436n, circuit);
    });

    it("26262817184209173020064851983289930415585458833826032068889457685516668396079 % 10973087284760918847830945157214812215033080207200058505424032130636", async function () {
        await testMod(26262817184209173020064851983289930415585458833826032068889457685516668396079n, 109730872847609188478309451572148122150330802072000585050763249942403213063436n, circuit);
    });

});

describe("Big mod test (Non Equal)", function () {

    this.timeout(100000);
    let circuit;

    before(async () => {
        circuit = await wasm_tester(path.join(__dirname, "circuits", "bigInt", "bigModNonEqual.circom"));
    });

    it("15 % 26262817184209173020064851983289930415585458833826032068889457685516668396079", async function () {
        await testModNonEqual(15n, 26262817184209173020064851983289930415585458833826032068889457685516668396079n, circuit);
    });

    it("109730872847609188478309451572148122150330802072000585050763249942403213063436 % 109730872847609188478309451572148122150330802072000585050763249942403213063436", async function () {
        await testModNonEqual(109730872847609188478309451572148122150330802072000585050763249942403213063436n, 109730872847609188478309451572148122150330802072000585050763249942403213063436n, circuit);
    });

    it("241883368833227870992582874977381642562670628715654596816240547673056925099527765267934881522933n % 26262817184209173020064851983289930415585458833826032068889457685516668396079", async function () {
        await testModNonEqual(241883368833227870992582874977381642562670628715654596816240547673056925099527765267934881522933n, 2609173020064851983289930415585458833826032068889457685516668396079n, circuit);
    });

});


describe("Big mult mod test", function () {

    this.timeout(100000);
    let circuit;

    before(async () => {
        circuit = await wasm_tester(path.join(__dirname, "circuits", "bigInt", "bigMultModP.circom"));
    });

    it("15 * 15 % 109730872847609188478309451572148122150330802072000585050763249942403213063436", async function () {
        await testMultiplyingMod(15n, 15n, 109730872847609188478309451572148122150330802072000585050763249942403213063436n, circuit);
    });

    it("109730872847609188478309451572148122150330802072000585050763249942403213063436 * 109730872847609188478309451572148122150330802072000585050763249942403213063436 % 109730872847609188478309451572148122150330802072000585050763249942403213063436", async function () {
        await testMultiplyingMod(109730872847609188478309451572148122150330802072000585050763249942403213063436n, 109730872847609188478309451572148122150330802072000585050763249942403213063436n, 109730872847609188478309451572148122150330802072000585050763249942403213063436n, circuit);
    });

    it("10973087284760918847830945157214812215033080207200058505076324 * 1097308728476091884783094515721481221503308020720005850507632499424032 % 2626281718420917302006485198328993041558545883382603206888945768559", async function () {
        await testMultiplyingMod(10973087284760918847830945157214812215033080207200058505076324n, 1097308728476091884783094515721481221503308020720005850507632499424032n, 2626281718420917302006485198328993041558545883382603206888945768559n, circuit);
    });

});

describe("Big mult mod test (NonEqual)", function () {

    this.timeout(100000);
    let circuit;

    before(async () => {
        circuit = await wasm_tester(path.join(__dirname, "circuits", "bigInt", "bigMultModPNonEqual.circom"));
    });

    it("15 * 15 % 1526894769500295165194414781268732802329236444379571779649775359021011024767794405099017497566861", async function () {
        await testNonEqualMultiplyingMod(15n, 15n, 1526894769500295165194414781268732802329236444379571779649775359021011024767794405099017497566861n, circuit);
    });

    it("24188336883322787099258287497738164256214809127723913841212670628715654596816240547673056925099527765267934881522933 * 109730872847609188478309451572148122150330802072000585050763249942403213063436 % 1526894769500295165194414781268732802329236444379571779649775359021011024767794405099017497566861", async function () {
        await testNonEqualMultiplyingMod(24188336883322787099258287497738164256214809127723913841212670628715654596816240547673056925099527765267934881522933n, 109730872847609188478309451572148122150330802072000585050763249942403213063436n, 1526894769500295165194414781268732802329236444379571779649775359021011024767794405099017497566861n, circuit);
    });

    it("24188336883322787099258287497738164256214809127723913841212670628715654596816240547673056925099527765267934881522933 * 213 % 1526894769500295165194414781268732802329236444379571779649775359021011024767794405099017497566861", async function () {
        await testNonEqualMultiplyingMod(24188336883322787099258287497738164256214809127723913841212670628715654596816240547673056925099527765267934881522933n, 213n, 1526894769500295165194414781268732802329236444379571779649775359021011024767794405099017497566861n, circuit);
    });

});
