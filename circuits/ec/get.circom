
pragma circom  2.1.6;

// Get generator by curve params
// Now there is only secp256k1 \ brainpoolP256r1 generator (64 4 chunking) and brainpoolP384r1
// Other curves / chunking will be added later
template EllipticCurveGetGenerator(CHUNK_SIZE, CHUNK_NUMBER, A, B, P){
    assert (CHUNK_SIZE == 64);
    
    signal output gen[2][CHUNK_NUMBER];
    if (CHUNK_NUMBER == 4){
        if (P[0] == 18446744069414583343 && P[1] == 18446744073709551615 && P[2] == 18446744073709551615 && P[3] == 18446744073709551615){
            gen[0] <== [6481385041966929816, 188021827762530521, 6170039885052185351, 8772561819708210092];
            gen[1] <== [11261198710074299576, 18237243440184513561, 6747795201694173352, 5204712524664259685];
        }
        if (P[0] == 2311270323689771895 && P[1] == 7943213001558335528 && P[2] == 4496292894210231666 && P[3] == 12248480212390422972){
            gen[0] <== [4198572826427273826, 13393186192988382146, 3191724131859150767, 10075307429387458507];
            gen[1] <== [6637554640278022551, 14012744714263826004, 10950579571776363977, 6088576656054338813];
        }
        if (P[0] == 18446744073709551615 && P[1] == 4294967295 && P[2] == 0 && P[3] == 18446744069414584321) {
            gen[0] <== [17627433388654248598, 8575836109218198432, 17923454489921339634, 7716867327612699207];
            gen[1] <== [14678990851816772085, 3156516839386865358, 10297457778147434006, 5756518291402817435];
        }
    }
    if (CHUNK_NUMBER == 6){
		if (P[0] == 4294967295 && P[1] == 18446744069414584320 && P[2] == 18446744073709551614 && P[3] == 18446744073709551615 && P[4] == 18446744073709551615 && P[5] == 18446744073709551615 ){
			gen[0] <== [4203087948775033527, 6125724927633205612, 6482722621138151992, 7934563412932533144, 10282218360005504372, 12288012358878168375];
			gen[1] <== [8809917716911230559, 747793036959711645, 16850834916486723776, 17938995913990739068, 6745997240412855337, 3897828414440483951];
		}
        if (P[0] == 9747760000893709395 && P[1] == 12453481191562877553 && P[2] == 1347097566612230435 && P[3] == 1526563086152259252 && P[4] == 1107163671716839903 && P[5] == 10140169582434348328){
            gen[0] <== [17259960781858189086, 16728304380777219754, 15816583608832692456, 9819997727167172579, 11720119409086381931, 2097662510161151487];
            gen[1] <== [4792396531824874261, 1028586674454626577, 16256874595948243240, 7113166411453454436, 6679378719998465362, 9997460611710698148];
        }
        
    }
    
}

// Get "dummy" point
// We can`t "if" signal in circom, so we always need to do all opertions, even we won`t use results of them
// For example, in scalar mult we can have case where we shouln`t add anything (bits = [0,0, .. ,0])
// We will ignore result, but we still should get it, so we need to pout something anyway
// We use this dummy point for such purposes
// Dummy point = G * 2**256
template EllipticCurveGetDummy(CHUNK_SIZE, CHUNK_NUMBER, A, B, P){
    assert (CHUNK_SIZE == 64);
    
    signal output dummyPoint[2][CHUNK_NUMBER];
    if (CHUNK_NUMBER == 4){
        if (P[0] == 18446744069414583343 && P[1] == 18446744073709551615 && P[2] == 18446744073709551615 && P[3] == 18446744073709551615){
            dummyPoint[0][0] <== 10590052641807177607;
            dummyPoint[0][1] <== 9925333800925632128;
            dummyPoint[0][2] <== 8387557479920400525;
            dummyPoint[0][3] <== 15939969690812260448;
            dummyPoint[1][0] <== 4032565550822761843;
            dummyPoint[1][1] <== 10670260723290159449;
            dummyPoint[1][2] <== 7050988852899951050;
            dummyPoint[1][3] <== 8797939803687366868;
        }
        if (P[0] == 2311270323689771895 && P[1] == 7943213001558335528 && P[2] == 4496292894210231666 && P[3] == 12248480212390422972){
            dummyPoint[0][0] <== 6780612927088034840;
            dummyPoint[0][1] <== 8014133780695468919;
            dummyPoint[0][2] <== 4483142094233996006;
            dummyPoint[0][3] <== 5761728430295292762;
            dummyPoint[1][0] <== 11756024211369815216;
            dummyPoint[1][1] <== 15043698037253957265;
            dummyPoint[1][2] <== 412673140429275224;
            dummyPoint[1][3] <== 7930703671170472648;
        }
        if (P[0] == 18446744073709551615 && P[1] == 4294967295 && P[2] == 0 && P[3] == 18446744069414584321) {
            dummyPoint[0][0] <== 4148137498610012746;
            dummyPoint[0][1] <== 51237685452122967;
            dummyPoint[0][2] <== 6555942389409504868;
            dummyPoint[0][3] <== 799804747332166731;
            dummyPoint[1][0] <== 13395177781894339167;
            dummyPoint[1][1] <== 1107697421929919296;
            dummyPoint[1][2] <== 6228258783500845564;
            dummyPoint[1][3] <== 11862546499924939746;
        }
    }
    
    if (CHUNK_NUMBER == 6){
		if (P[0] == 4294967295 && P[1] == 18446744069414584320 && P[2] == 18446744073709551614 && P[3] == 18446744073709551615 && P[4] == 18446744073709551615 && P[5] == 18446744073709551615 ){
			dummyPoint[0] <== [3598307048231252138, 15741415447784811687, 1941052507991901335, 4155899906393519185, 2588150101175929229, 16695956721106145545];
			dummyPoint[1] <== [11009719670661534612, 8023462911667119667, 9271010332898980309, 13524974403491980216, 12794233661752207269, 6511462203569285408];
		}
        if (P[0] == 9747760000893709395 && P[1] == 12453481191562877553 && P[2] == 1347097566612230435 && P[3] == 1526563086152259252 && P[4] == 1107163671716839903 && P[5] == 10140169582434348328){
            dummyPoint[0] <== [522720248942821492, 13227018843434759032, 17067096815187998133, 8957183796380674257, 7544165743263758981, 6159107397665645433];
            dummyPoint[1] <== [9174881270872499347, 7148726877058227897, 1584493337432922624, 1438582915076653591, 16161625210166602047, 946254366129831718];
        }
    }
    
    
    
}

// Get order of eliptic curve
template EllipicCurveGetOrder(CHUNK_SIZE, CHUNK_NUMBER, A, B, P){
    assert (CHUNK_SIZE == 64);
    
    signal output order[CHUNK_NUMBER];
    if (CHUNK_NUMBER == 4){
        if (P[0] == 18446744069414583343 && P[1] == 18446744073709551615 && P[2] == 18446744073709551615 && P[3] == 18446744073709551615){
            order <== [13822214165235122497, 13451932020343611451, 18446744073709551614, 18446744073709551615];
        }
        if (P[0] == 2311270323689771895 && P[1] == 7943213001558335528 && P[2] == 4496292894210231666 && P[3] == 12248480212390422972){
            order <== [10384753744809580199, 10104242082523752183, 4496292894210231665, 12248480212390422972];
        }
        if (P[0] == 18446744073709551615 && P[1] == 4294967295 && P[2] == 0 && P[3] == 18446744069414584321) {
            order <== [17562291160714782033, 13611842547513532036, 18446744073709551615, 18446744069414584320];
        }
    }
    if (CHUNK_NUMBER == 6){
		if (P[0] == 4294967295 && P[1] == 18446744069414584320 && P[2] == 18446744073709551614 && P[3] == 18446744073709551615 && P[4] == 18446744073709551615 && P[5] == 18446744073709551615 ){
			order <== [17072048233947408755, 6348401684107011962, 14367412456785391071, 18446744073709551615, 18446744073709551615, 18446744073709551615];
		}
        if (P[0] == 9747760000893709395 && P[1] == 12453481191562877553 && P[2] == 1347097566612230435 && P[3] == 1526563086152259252 && P[4] == 1107163671716839903 && P[5] == 10140169582434348328){
            order <== [4289733633151100261, 14932448379039367952, 2240099277684876711, 1526563086152259251, 1107163671716839903, 10140169582434348328];
        }
    }
}